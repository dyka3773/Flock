drop procedure if exists `Flock`.`getContacts`;
drop procedure if exists `Flock`.`getCamps`;
drop procedure if exists `Flock`.`getAllGroups`;
drop procedure if exists `Flock`.`exists`;
drop procedure if exists `Flock`.`addCompany`;
drop procedure if exists `Flock`.`addBusiness_Personal`;
drop procedure if exists `Flock`.`addContact`;
drop procedure if exists `Flock`.`addCampaign`;
drop procedure if exists `Flock`.`addGroup`;
drop procedure if exists `Flock`.`addContactToGroup`;
drop procedure if exists `Flock`.`deleteContact`;
drop procedure if exists `Flock`.`deleteManyContacts`;
drop procedure if exists `Flock`.`deleteCamp`;
drop procedure if exists `Flock`.`deleteManyCamps`;
drop procedure if exists `Flock`.`deleteGroup`;
drop procedure if exists `Flock`.`getCampsInGroup`;
drop procedure if exists `Flock`.`getContactsInGroup`;
drop procedure if exists `Flock`.`editContact`;
drop procedure if exists `Flock`.`editCampaign`;
drop procedure if exists `Flock`.`editCompany`;
drop procedure if exists `Flock`.`editBP`;
drop procedure if exists `Flock`.`getAccDetails`;

DELIMITER $$

CREATE PROCEDURE `Flock`.`exists` (
IN username varchar(45), in passwrd varchar(45))
BEGIN
	select AID 
    from Accounts A 
    where A.Email=username
    and A.Passwd=passwrd;
END$$

CREATE PROCEDURE `Flock`.`getAccDetails` (
IN AIID int)
BEGIN
	
    select @accType=type from Accounts where AID=AIID;
	
    if @accType=0 then
		select A.Email, A.Passwd, A.Type, A.Num_of_Camps, A.Num_of_Conts, 
				A.Num_of_Sent, BP.F_Name, BP.L_Name, BP.Phone, BP.Gender, BP.Country, BP.ZIP
		from Accounts A join Business_Personal BP on (A.AID=BP.AID)
		where A.AID=AIID;
	else
		select A.Email, A.Passwd, A.Type, A.Num_of_Camps, A.Num_of_Conts, 
				A.Num_of_Sent,  C.C_Name, C.Country, C.Phone, C.Phy_Address, C.ZIP
		from Accounts A join Company C on (A.AID=C.AID)
		where A.AID=AIID;
    end if;
    
END$$

CREATE PROCEDURE `Flock`.`editCompany` (
in aid int , in password varchar(45), in name varchar(45),  in phone int(14), in country varchar(45), in zip varchar(45), in phyAddress varchar(45))
BEGIN
	
    update Accounts
    set Passwd = password
    where AID = aid;

	update Company
    set C_Name = name, Phone = phone, Country = country, ZIP = zip, Phy_Address = phyAddress
    where AID = aid;
END$$

CREATE PROCEDURE `Flock`.`editBP` (
in aid int , in password varchar(45), in fName varchar(45), in lName varchar(45), in phone int(14), in gender varchar(45), in country varchar(45), in zip varchar(45))
BEGIN

	update Accounts
    set Passwd = password
    where AID = aid;

	update Business_Personal
    set F_Name = fName, L_Name = lName, Phone = phone, Gender = gender, Country = country, ZIP = zip
    where AID = aid;
END$$

CREATE PROCEDURE `Flock`.`editCampaign` (
in caiid int, in cname varchar(45), in aid int , in subject varchar(100), in text mediumtext, in endDate date, in frequency varchar(45))
BEGIN
	update Campaign
    set C_Name = cname, Subject = subject, Text = text, End_Date = endDate, Frequency = frequency
    where CAID=caiid and AID=aid;
END$$

CREATE PROCEDURE `Flock`.`editContact` (
in cid int, in aid int, in fullname varchar(45), in email varchar(45))
BEGIN
	update Contacts
    set Full_Name = fullname, Email = email
    where CID=cid and AID=aid;
END$$

CREATE PROCEDURE `Flock`.`getContactsInGroup` (
in aid int, in groupname varchar(45))
BEGIN
	select C.CID, C.Full_Name, C.Email, C.AID
    from Contacts C join Contacts_in_Groups CiG on (C.CID=CiG.CID)
    join Groups G on (CiG.GID=G.GID)
    where G.AID=aid and G.Group_Name=groupname and G.AID=C.AID;
END$$

CREATE PROCEDURE `Flock`.`getCampsInGroup` (
in aid int, in groupname varchar(45))
BEGIN
	select *
    from Campaign C
    where C.AID=aid and C.GID =(select G.GID
								from Groups G
								where G.Group_Name=groupname and G.AID=aid
	);
END$$

CREATE PROCEDURE `Flock`.`deleteGroup` (
in giid int, in aiid int)
BEGIN
	delete from `Flock`.Groups
    where GID=giid and AID=aiid;
END$$

CREATE PROCEDURE `Flock`.`deleteManyCamps` (
in caids varchar(1000), in aiid int)
BEGIN
	-- Αναγκαστικά θα γίνει με φουλ μπακάλικο τρόπο αυτό για να μην έχω 354654 κλήσεις στη βάση
    while (locate('|',caids)>0) 		-- cids is something like '65|98|23|12|1'
    do
		set @value = elt(1, caids);
        set caids = substring(caids, locate('|',caids)+1);
        
        delete from Campaign
		where CAID= cast(@value as unsigned integer)
        and AID=aiid;
	end while;
END$$

CREATE PROCEDURE `Flock`.`deleteCamp` (
in caiid int, in aiid int)
BEGIN
	delete from Campaign
    where CAID=caiid and AID=aiid;
END$$

CREATE PROCEDURE `Flock`.`deleteManyContacts` (
in cids varchar(1000), in aiid int)
BEGIN
	-- Αναγκαστικά θα γίνει με φουλ μπακάλικο τρόπο αυτό για να μην έχω 354654 κλήσεις στη βάση
    while (locate('|',cids)>0) 		-- cids is something like '65|98|23|12|1'
    do
		set @value = elt(1, cids);
        set cids = substring(cids, locate('|',cids)+1);
        
        delete from Contacts
		where CID= cast(@value as unsigned integer)
        and AID=aiid;
	end while;
END$$

CREATE PROCEDURE `Flock`.`deleteContact` (
in ciid int, in aiid int)
BEGIN
	delete from Contacts 
    where CID=ciid and AID=aiid;
END$$

CREATE PROCEDURE `Flock`.`addContactToGroup` (
in cid int, in gid int)
BEGIN
	INSERT INTO `Flock`.`Contacts_in_Groups`
	(`CID`,
	`GID`)
	VALUES
	(cid,
	gid);

END$$

CREATE PROCEDURE `Flock`.`addGroup` (
in aid int, in groupname varchar(45))
BEGIN
	INSERT INTO `Flock`.`Groups`
	(`Group_Name`,
	`AID`)
	VALUES
	(groupname,
	aid);

END$$

CREATE PROCEDURE `Flock`.`addCampaign` (
in sub varchar(100), in text mediumtext, in start date, in end date, in cname varchar(45), in frequency varchar(45), in attachment blob, in aid int, in gid int)
BEGIN
	INSERT INTO `Flock`.`Campaign`
	(`Subject`,
	`Text`,
	`Start_Date`,
	`End_Date`,
	`Creation_Date`,
	`C_Name`,
	`Frequency`,
	`Num_of_Conts`,
    `Attachment`,
	`AID`,
	`GID`)
	VALUES
	(sub,
	text,
	start,
	end,
	current_date(),
	cname,
	frequency,
	0,
    attachment,
	aid,
	gid);

END$$

CREATE PROCEDURE `Flock`.`addContact` (
in fname varchar(45), in email varchar(45), in aid int, in gid int)
BEGIN
	INSERT INTO `Flock`.`Contacts`
	(`Full_Name`,
	`Email`,
	`AID`)
	VALUES
	(fname,
	email,
	aid);
    
    if gid is null then
		set @ciid = LAST_INSERT_ID();
		call addContactToGroup(@ciid,gid);
	end if;
END$$

CREATE PROCEDURE `Flock`.`addBusiness_Personal` (
in email varchar(45), in passwrd int, in firstname varchar(45), in lastname varchar(45), in phone int(14), in gender varchar(45), in country varchar(45), in zip varchar(45))
BEGIN
	insert into Accounts (Email,Passwd,Type,Num_of_Camps,Num_of_Conts,Num_of_Sent)
    values(email, passwrd, 0, 0,0,0);
    
    set @aiid = LAST_INSERT_ID();
    
    insert into Business_Personal(AID,F_Name,L_Name,Phone,Gender,Country,ZIP)
    values(@aiid, firstname, lastname, phone, gender, country, zip);
    
    call `Flock`.`exists`(email, passwrd);
END$$

CREATE PROCEDURE `Flock`.`addCompany` (
in email varchar(45), in passwrd int, in cname varchar(45), in phone int(14), in country varchar(45), in zip varchar(45), in address varchar(45))
BEGIN
	insert into Accounts (Email,Passwd,Type,Num_of_Camps,Num_of_Conts,Num_of_Sent)
    values(email, passwrd, 1, 0,0,0);
    
    set @aiid = LAST_INSERT_ID();
    
    insert into Company (AID,C_Name,Phone,Country,ZIP,Phy_Address)
    values(@aiid, cname, phone, country, zip, address);
    
    call `Flock`.`exists`(email, passwrd);
END$$

CREATE PROCEDURE `Flock`.`getAllGroups` (
IN AIID int)
BEGIN
	select * from Groups G where G.AID=AIID;
END$$

CREATE PROCEDURE `Flock`.`getContacts` (
IN AIID int, IN keyword varchar(45))
BEGIN
IF keyword IS NULL THEN
	select * from Contacts C where C.AID=AIID;
ELSE
	select * 
    from Contacts C
    where (C.AID=AIID) 
    and ( C.Full_Name LIKE CONCAT('%',keyword,'%') or C.Email LIKE CONCAT('%',keyword,'%'));
END IF;
END$$

create procedure `Flock`.`getCamps` (
IN AIID int, IN keyword varchar(45))
begin
IF keyword IS NULL THEN
	select * from Campaign C where C.AID=AIID;
ELSE
	select * 
    from Campaign C
    where (C.AID=AIID) 
    and ( C.C_Name LIKE CONCAT('%',keyword,'%'));
END IF;
end$$
