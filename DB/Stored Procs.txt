drop procedure if exists `Flock`.`getContacts`;
drop procedure if exists `Flock`.`getCamps`;
drop procedure if exists `Flock`.`getAllGroups`;
drop procedure if exists `Flock`.`user_exists`;
drop procedure if exists `Flock`.`addCompany`;
drop procedure if exists `Flock`.`addBusiness_Personal`;
drop procedure if exists `Flock`.`addContact`;
drop procedure if exists `Flock`.`addCampaign`;
drop procedure if exists `Flock`.`addGroup`;
drop procedure if exists `Flock`.`addContactToGroup`;
drop procedure if exists `Flock`.`deleteContact`;
drop procedure if exists `Flock`.`deleteManyContacts`;
drop procedure if exists `Flock`.`deleteCamp`;
drop procedure if exists `Flock`.`deleteManyCamps`;
drop procedure if exists `Flock`.`deleteGroup`;
drop procedure if exists `Flock`.`getCampsInGroup`;
drop procedure if exists `Flock`.`getContactsInGroup`;
drop procedure if exists `Flock`.`editContact`;
drop procedure if exists `Flock`.`editCampaign`;
drop procedure if exists `Flock`.`editCompany`;
drop procedure if exists `Flock`.`editBP`;
drop procedure if exists `Flock`.`getAccDetails`;
drop procedure if exists `Flock`.`deleteAcc`;
drop procedure if exists `Flock`.`addNOS`;
drop procedure if exists `Flock`.`getCampFromCAID`;
drop procedure if exists `Flock`.`numOfPagesInConts`;
drop procedure if exists `Flock`.`numOfPagesInCamps`;

DELIMITER $$

CREATE PROCEDURE `Flock`.`numOfPagesInCamps` (
IN AIID int, in keyword varchar(45), in ofst int)
BEGIN
IF keyword IS NULL THEN
	select count(*)/ofst into  @pageCount 
    from Campaign C
    where (C.AID=AIID);
ELSE
	select count(*)/ofst into  @pageCount
    from Campaign C
    where (C.AID=AIID) 
    and ( C.C_Name LIKE CONCAT('%',keyword,'%'));
END IF;

select ceil(@pageCount);
END$$

CREATE PROCEDURE `Flock`.`numOfPagesInConts` (
IN AIID int, in keyword varchar(45), in ofst int)
BEGIN
IF keyword IS NULL THEN
	select count(*)/ofst into  @pageCount
    from Contacts C
    where (C.AID=AIID);
ELSE
	select count(*)/ofst into  @pageCount
    from Contacts C
    where (C.AID=aiid) 
    and ( C.Full_Name LIKE CONCAT('%',keyword,'%') 
		or C.Email LIKE CONCAT('%',keyword,'%'));
END IF;
    
select ceil(@pageCount);
END$$

CREATE PROCEDURE `Flock`.`getCampFromCAID` (
IN caiid int)
BEGIN
	select * from Campaign where CAID=caiid;
END$$

CREATE PROCEDURE `Flock`.`addNOS` (
IN aiid int, in newNOS int)
BEGIN
	update Accounts A
    set A.Num_of_Sent = A.Num_of_Sen + newNOS
    where A.AID=aiid;
END$$

CREATE PROCEDURE `Flock`.`deleteAcc` (
IN aiid int)
BEGIN
	delete from `Flock`.Accounts
    where AID=aiid;
END$$

CREATE PROCEDURE `Flock`.`user_exists` (
IN username varchar(45), in passwrd varchar(45))
BEGIN
	set @userID= null;
	
    select A.AID into @userID
    from Accounts A 
    where A.Email=username
    and A.Passwd=passwrd;
    
    if @userID is null then
		select -1;
	else
		select @userID;
	end if;
END$$

CREATE PROCEDURE `Flock`.`getAccDetails` (
IN AIID int)
BEGIN
	
    select A.type into @accType from Accounts A where A.AID=AIID;
	
    if @accType=0 then
		select A.Email, A.Passwd, A.Type, A.Num_of_Camps, A.Num_of_Conts, 
				A.Num_of_Sent, BP.F_Name, BP.L_Name, BP.Phone, BP.Gender, BP.Country, BP.ZIP
		from Accounts A join Business_Personal BP on (A.AID=BP.AID)
		where A.AID=AIID;
	else
		select A.Email, A.Passwd, A.Type, A.Num_of_Camps, A.Num_of_Conts, 
				A.Num_of_Sent,  C.C_Name, C.Country, C.Phone, C.Phy_Address, C.ZIP
		from Accounts A join Company C on (A.AID=C.AID)
		where A.AID=AIID;
    end if;
    
END$$

CREATE PROCEDURE `Flock`.`editCompany` (
in aiid int , in password varchar(45), in name varchar(45),  in phone int(14),
in country varchar(45), in zip varchar(45), in phyAddress varchar(45))
BEGIN
	
    update Accounts
    set Passwd = password
    where AID = aiid;

	update Company C
    set C.C_Name = name, C.Phone = phone, C.Country = country, C.ZIP = zip, C.Phy_Address = phyAddress
    where C.AID = aiid;
END$$

CREATE PROCEDURE `Flock`.`editBP` (
in aiid int , in password varchar(45), in fName varchar(45), in lName varchar(45), in phoone int(14),
in geender varchar(45), in countryy varchar(45), in ziip varchar(45))
BEGIN

	update Accounts
    set Passwd = password
    where AID = aiid;

	update Business_Personal BP
    set BP.F_Name = fName, BP.L_Name = lName, BP.Phone = phoone, BP.Gender = geender, BP.Country = countryy, BP.ZIP = ziip
    where BP.AID = aiid;
END$$

CREATE PROCEDURE `Flock`.`editCampaign` (
in caiid int, in cname varchar(45), in aid int , in subject varchar(100), in text mediumtext, in endDate date, in frequency varchar(45))
BEGIN
	update Campaign C
    set C.C_Name = cname, C.Subject = subject, C.Text = text, C.End_Date = endDate, C.Frequency = frequency
    where C.CAID=caiid and C.AID=aid;
END$$

CREATE PROCEDURE `Flock`.`editContact` (
in cid int, in aid int, in fullname varchar(45), in email varchar(45))
BEGIN
	update Contacts C
    set C.Full_Name = fullname, C.Email = email
    where (C.CID=cid and C.AID=aid);
END$$

CREATE PROCEDURE `Flock`.`getContactsInGroup` (
in aid int, in gid int)
BEGIN
	select C.CID, C.Full_Name, C.Email, C.AID
    from Contacts C join Contacts_in_Groups CiG on (C.CID=CiG.CID)
    where C.AID=aid and CiG.GID=gid;
END$$

CREATE PROCEDURE `Flock`.`getCampsInGroup` (
in aid int, in gid int)
BEGIN
	select C.CAID, C.Subject, C.Text, C.Start_Date, C.End_Date, C.Creation_Date,
    C.C_Name, C.Frequency, C.Num_of_Conts, C.Attachment, C.AID, C.GID
    from Campaign C join Groups G on (C.GID=G.GID)
    where C.AID=aid AND C.GID=gid;
END$$

CREATE PROCEDURE `Flock`.`deleteGroup` (
in giid int, in aiid int)
BEGIN
	delete from `Flock`.Groups
    where GID=giid and AID=aiid;
END$$

CREATE PROCEDURE `Flock`.`deleteManyCamps` (
in caids varchar(1000), in aiid int)
BEGIN
	-- Αναγκαστικά θα γίνει με φουλ μπακάλικο τρόπο αυτό για να μην έχω 354654 κλήσεις στη βάση
    while (locate('|',caids)>0) 		-- caids is something like '65|98|23|12|1'
    do
		set @value = elt(1, caids);
        set caids = substring(caids, locate('|',caids)+1);
        
        delete from Campaign
		where CAID= cast(@value as unsigned integer)
        and AID=aiid;
	end while;
END$$

CREATE PROCEDURE `Flock`.`deleteCamp` (
in caiid int, in aiid int)
BEGIN
	delete from Campaign
    where CAID=caiid and AID=aiid;
END$$

CREATE PROCEDURE `Flock`.`deleteManyContacts` (
in cids varchar(1000), in aiid int)
BEGIN
	-- Αναγκαστικά θα γίνει με φουλ μπακάλικο τρόπο αυτό για να μην έχω 354654 κλήσεις στη βάση
    while (locate('|',cids)>0) 		-- cids is something like '65|98|23|12|1'
    do
		set @value = elt(1, cids);
        set cids = substring(cids, locate('|',cids)+1);
        
        delete from Contacts
		where CID= cast(@value as unsigned integer)
        and AID=aiid;
	end while;
END$$

CREATE PROCEDURE `Flock`.`deleteContact` (
in ciid int, in aiid int)
BEGIN
	delete from Contacts 
    where CID=ciid and AID=aiid;
END$$

CREATE PROCEDURE `Flock`.`addContactToGroup` (
in cid int, in gid int)
BEGIN
	INSERT INTO `Flock`.`Contacts_in_Groups`
	(`CID`,
	`GID`)
	VALUES
	(cid,
	gid);

END$$

CREATE PROCEDURE `Flock`.`addGroup` (
in aiid int, in groupname varchar(45))
BEGIN
	INSERT INTO `Flock`.`Groups`
	(`Group_Name`,
	`AID`)
	VALUES
	(groupname,
	aiid);

END$$

CREATE PROCEDURE `Flock`.`addCampaign` (
in sub varchar(100), in text mediumtext, in start date, in endDate date, 
in cname varchar(45), in frequency varchar(45), in attachment blob, in aid int, in gid int)
BEGIN
	set @checking = null;
	select G.aid into @checking from Groups G where G.GID=gid and G.AID=aid;
	
    if @checking is not null then
    
		select count(CIG.CID) into @NOC 
        from Contacts_in_Groups CIG join Groups G on (CIG.GID=G.GID)
        where G.GID=gid;
    
		INSERT INTO `Flock`.`Campaign`
		(`Subject`,
		`Text`,
		`Start_Date`,
		`End_Date`,
		`Creation_Date`,
		`C_Name`,
		`Frequency`,
		`Num_of_Conts`,
		`Attachment`,
		`AID`,
		`GID`)
		VALUES
		(sub,
		text,
		start,
		endDate,
		current_date(),
		cname,
		frequency,
		@NOC,
		attachment,
		aid,
		gid);
	
    end if;

END$$

CREATE PROCEDURE `Flock`.`addContact` (
in fname varchar(45), in email varchar(45), in aid int, in gid int)
BEGIN

	if gid is not null then
		
        -- Check if Group belongs to the certain user
		set @checking = null;
		select G.aid into @checking from Groups G where G.GID=gid and G.AID=aid;
		
		if @checking is not null then
			INSERT INTO `Flock`.`Contacts`
			(`Full_Name`,
			`Email`,
			`AID`)
			VALUES
			(fname,
			email,
			aid);
			
            set @ciid = LAST_INSERT_ID();
			call addContactToGroup(@ciid,gid);
        else
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'This user does not have access to this certain Group';
        end if;
	else
		INSERT INTO `Flock`.`Contacts`
			(`Full_Name`,
			`Email`,
			`AID`)
			VALUES
			(fname,
			email,
			aid);
	end if;
END$$

CREATE PROCEDURE `Flock`.`addBusiness_Personal` (
in email varchar(45), in passwrd varchar(45), in firstname varchar(45), in lastname varchar(45), 
in phone varchar(45), in gender varchar(45), in country varchar(45), in zip varchar(45))
BEGIN
	insert into Accounts (Email,Passwd,Type,Num_of_Camps,Num_of_Conts,Num_of_Sent)
    values(email, passwrd, 0, 0,0,0);
    
    set @aiid = LAST_INSERT_ID();
    
    insert into Business_Personal(AID,F_Name,L_Name,Phone,Gender,Country,ZIP)
    values(@aiid, firstname, lastname, phone, gender, country, zip);
    
    call `Flock`.`user_exists`(email, passwrd);
END$$

CREATE PROCEDURE `Flock`.`addCompany` (
in email varchar(45), in passwrd varchar(45), in cname varchar(45), in phone varchar(45), 
in country varchar(45), in zip varchar(45), in address varchar(45))
BEGIN
	insert into Accounts (Email,Passwd,Type,Num_of_Camps,Num_of_Conts,Num_of_Sent)
    values(email, passwrd, 1, 0,0,0);
    
    set @aiid = LAST_INSERT_ID();
    
    insert into Company (AID,C_Name,Phone,Country,ZIP,Phy_Address)
    values(@aiid, cname, phone, country, zip, address);
    
    call `Flock`.`user_exists`(email, passwrd);
END$$

CREATE PROCEDURE `Flock`.`getAllGroups` (
IN AIID int)
BEGIN
	select * from Groups G where G.AID=AIID;
END$$

CREATE PROCEDURE `Flock`.`getContacts` (
IN AIID int, in keyword varchar(45), in ofst int, in num_of_rows int)
BEGIN
IF keyword IS NULL THEN
	select * 
    from Contacts C
    where (C.AID=AIID) 
	limit ofst, num_of_rows;
ELSE
	select * 
    from Contacts C
    where (C.AID=aiid) 
    and ( C.Full_Name LIKE CONCAT('%',keyword,'%') 
		or C.Email LIKE CONCAT('%',keyword,'%'))
	limit ofst, num_of_rows;
END IF;
END$$

create procedure `Flock`.`getCamps` (
IN AIID int, in keyword varchar(45),in ofst int, in num_of_rows int)
begin
IF keyword IS NULL THEN
	select * 
    from Campaign C
    where (C.AID=AIID) 
	limit ofst, num_of_rows;
ELSE
	select * 
    from Campaign C
    where (C.AID=AIID) 
    and ( C.C_Name LIKE CONCAT('%',keyword,'%'))
    limit ofst, num_of_rows;
END IF;
end$$