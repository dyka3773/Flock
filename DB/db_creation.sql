-- MySQL Script generated by MySQL Workbench
-- Wed May 12 14:52:58 2021
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema Flock
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `Flock` ;

-- -----------------------------------------------------
-- Schema Flock
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `Flock` DEFAULT CHARACTER SET utf8mb4 ;
USE `Flock` ;

-- -----------------------------------------------------
-- Table `Flock`.`Accounts`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Flock`.`Accounts` ;

CREATE TABLE IF NOT EXISTS `Flock`.`Accounts` (
  `AID` INT(11) NOT NULL AUTO_INCREMENT,
  `Email` VARCHAR(45) NOT NULL,
  `Passwd` VARCHAR(45) NOT NULL,
  `Type` INT(11) NOT NULL,
  `Num_of_Camps` INT(10) NOT NULL,
  `Num_of_Conts` INT(10) NOT NULL,
  `Num_of_Sent` INT(10) NOT NULL,
  PRIMARY KEY (`AID`),
  UNIQUE INDEX `emailAlreadyExistsInDB` (`Email` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 3
DEFAULT CHARACTER SET = utf8mb4
COMMENT = '// If type = 0 then Account is Personal\\n// If type = 1 then Account is Company';


-- -----------------------------------------------------
-- Table `Flock`.`Business_Personal`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Flock`.`Business_Personal` ;

CREATE TABLE IF NOT EXISTS `Flock`.`Business_Personal` (
  `AID` INT(11) NOT NULL,
  `F_Name` VARCHAR(45) NOT NULL,
  `L_Name` VARCHAR(45) NOT NULL,
  `Phone` VARCHAR(45) NOT NULL,
  `Gender` VARCHAR(45) NOT NULL,
  `Country` VARCHAR(45) NOT NULL,
  `ZIP` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`AID`),
  CONSTRAINT `fk_AID_from_Business_Personal`
    FOREIGN KEY (`AID`)
    REFERENCES `Flock`.`Accounts` (`AID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `Flock`.`Frequencies`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Flock`.`Frequencies` ;

CREATE TABLE IF NOT EXISTS `Flock`.`Frequencies` (
  `FID` INT(11) NOT NULL AUTO_INCREMENT,
  `F_Name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`FID`),
  UNIQUE INDEX `thisFrequencyAlreadyExists` (`F_Name` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 8
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `Flock`.`Groups`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Flock`.`Groups` ;

CREATE TABLE IF NOT EXISTS `Flock`.`Groups` (
  `GID` INT(11) NOT NULL AUTO_INCREMENT,
  `Group_Name` VARCHAR(45) NOT NULL,
  `AID` INT(11) NOT NULL,
  PRIMARY KEY (`GID`),
  UNIQUE INDEX `groupAlreadyExistsInAccount` (`Group_Name` ASC, `AID` ASC) VISIBLE,
  INDEX `fk_AID_from_Groups` (`AID` ASC) VISIBLE,
  CONSTRAINT `fk_AID_from_Groups`
    FOREIGN KEY (`AID`)
    REFERENCES `Flock`.`Accounts` (`AID`)
    ON DELETE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 7
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `Flock`.`Campaign`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Flock`.`Campaign` ;

CREATE TABLE IF NOT EXISTS `Flock`.`Campaign` (
  `CAID` INT(11) NOT NULL AUTO_INCREMENT,
  `Subject` VARCHAR(100) NOT NULL,
  `Text` MEDIUMTEXT NULL DEFAULT NULL,
  `Start_Date` DATETIME NOT NULL,
  `End_Date` DATETIME NULL DEFAULT NULL,
  `Creation_Date` DATETIME NOT NULL,
  `C_Name` VARCHAR(45) NOT NULL,
  `FID` INT(11) NOT NULL,
  `Num_of_Conts` INT(11) UNSIGNED ZEROFILL NOT NULL,
  `Attachment` BLOB NULL DEFAULT NULL,
  `AID` INT(11) NOT NULL,
  `GID` INT(11) NOT NULL,
  PRIMARY KEY (`CAID`),
  UNIQUE INDEX `thisCnameAlreadyExistsInThisUser` (`C_Name` ASC, `AID` ASC) VISIBLE,
  INDEX `fk_AID_from_Camps` (`AID` ASC) VISIBLE,
  INDEX `fk_GID_from_Camps` (`GID` ASC) VISIBLE,
  INDEX `fk_FID_from_Camps` (`FID` ASC) VISIBLE,
  CONSTRAINT `fk_AID_from_Camps`
    FOREIGN KEY (`AID`)
    REFERENCES `Flock`.`Accounts` (`AID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_FID_from_Camps`
    FOREIGN KEY (`FID`)
    REFERENCES `Flock`.`Frequencies` (`FID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_GID_from_Camps`
    FOREIGN KEY (`GID`)
    REFERENCES `Flock`.`Groups` (`GID`)
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 7
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `Flock`.`Company`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Flock`.`Company` ;

CREATE TABLE IF NOT EXISTS `Flock`.`Company` (
  `AID` INT(11) NOT NULL,
  `C_Name` VARCHAR(45) NOT NULL,
  `Phone` VARCHAR(45) NOT NULL,
  `Country` VARCHAR(45) NOT NULL,
  `ZIP` VARCHAR(45) NOT NULL,
  `Phy_Address` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`AID`),
  CONSTRAINT `fk_AID_from_Company`
    FOREIGN KEY (`AID`)
    REFERENCES `Flock`.`Accounts` (`AID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `Flock`.`Contacts`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Flock`.`Contacts` ;

CREATE TABLE IF NOT EXISTS `Flock`.`Contacts` (
  `CID` INT(11) NOT NULL AUTO_INCREMENT,
  `Full_Name` VARCHAR(45) NOT NULL,
  `Email` VARCHAR(45) NOT NULL,
  `AID` INT(11) NOT NULL,
  PRIMARY KEY (`CID`),
  UNIQUE INDEX `emailAlreadyExistsInAccount` (`Email` ASC, `AID` ASC) VISIBLE,
  INDEX `fk_AID_from_Contacts` (`AID` ASC) VISIBLE,
  CONSTRAINT `fk_AID_from_Contacts`
    FOREIGN KEY (`AID`)
    REFERENCES `Flock`.`Accounts` (`AID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 28
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `Flock`.`Contacts_in_Groups`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Flock`.`Contacts_in_Groups` ;

CREATE TABLE IF NOT EXISTS `Flock`.`Contacts_in_Groups` (
  `CID` INT(11) NOT NULL,
  `GID` INT(11) NOT NULL,
  PRIMARY KEY (`GID`, `CID`),
  INDEX `fk_CID_from_CiG` (`CID` ASC) VISIBLE,
  CONSTRAINT `fk_CID_from_CiG`
    FOREIGN KEY (`CID`)
    REFERENCES `Flock`.`Contacts` (`CID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_GID_from_CiG`
    FOREIGN KEY (`GID`)
    REFERENCES `Flock`.`Groups` (`GID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;

USE `Flock` ;

-- -----------------------------------------------------
-- procedure addBusiness_Personal
-- -----------------------------------------------------

USE `Flock`;
DROP procedure IF EXISTS `Flock`.`addBusiness_Personal`;

DELIMITER $$
USE `Flock`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `addBusiness_Personal`(
IN email VARCHAR(45), IN passwrd VARCHAR(45), IN firstname VARCHAR(45), IN lastname VARCHAR(45), 
IN phone VARCHAR(45), IN gender VARCHAR(45), IN country VARCHAR(45), IN zip VARCHAR(45))
BEGIN
	INSERT INTO Accounts (Email,Passwd,Type,Num_of_Camps,Num_of_Conts,Num_of_Sent)
    VALUES(email, passwrd, 0, 0,0,0);
    
    SET @aiid = LAST_INSERT_ID();
    
    INSERT INTO Business_Personal(AID,F_Name,L_Name,Phone,Gender,Country,ZIP)
    VALUES(@aiid, firstname, lastname, phone, gender, country, zip);
    
    CALL `Flock`.`user_exists`(email, passwrd);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure addCompany
-- -----------------------------------------------------

USE `Flock`;
DROP procedure IF EXISTS `Flock`.`addCompany`;

DELIMITER $$
USE `Flock`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `addCompany`(
IN email VARCHAR(45), IN passwrd VARCHAR(45), IN cname VARCHAR(45), IN phone VARCHAR(45), 
IN country VARCHAR(45), IN zip VARCHAR(45), IN address VARCHAR(45))
BEGIN
	INSERT INTO Accounts (Email,Passwd,Type,Num_of_Camps,Num_of_Conts,Num_of_Sent)
    VALUES(email, passwrd, 1, 0,0,0);
    
    SET @aiid = LAST_INSERT_ID();
    
    INSERT INTO Company (AID,C_Name,Phone,Country,ZIP,Phy_Address)
    VALUES(@aiid, cname, phone, country, zip, address);
    
    CALL `Flock`.`user_exists`(email, passwrd);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure addContactToGroup
-- -----------------------------------------------------

USE `Flock`;
DROP procedure IF EXISTS `Flock`.`addContactToGroup`;

DELIMITER $$
USE `Flock`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `addContactToGroup`(
IN cid INT, IN gid INT)
BEGIN
	INSERT INTO `Flock`.`Contacts_in_Groups`
	(`CID`,
	`GID`)
	VALUES
	(cid,
	gid);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure addGroup
-- -----------------------------------------------------

USE `Flock`;
DROP procedure IF EXISTS `Flock`.`addGroup`;

DELIMITER $$
USE `Flock`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `addGroup`(
IN aiid INT, IN groupname VARCHAR(45))
BEGIN
	INSERT INTO `Flock`.`Groups`
	(`Group_Name`,
	`AID`)
	VALUES
	(groupname,
	aiid);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure addNOS
-- -----------------------------------------------------

USE `Flock`;
DROP procedure IF EXISTS `Flock`.`addNOS`;

DELIMITER $$
USE `Flock`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `addNOS`(
IN aiid INT, IN newNOS INT)
BEGIN
	UPDATE Accounts A
    SET A.Num_of_Sent = A.Num_of_Sen + newNOS
    WHERE A.AID=aiid;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deleteAcc
-- -----------------------------------------------------

USE `Flock`;
DROP procedure IF EXISTS `Flock`.`deleteAcc`;

DELIMITER $$
USE `Flock`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deleteAcc`(
IN aiid INT)
BEGIN
	DELETE FROM `Flock`.Accounts
    WHERE AID=aiid;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deleteCamp
-- -----------------------------------------------------

USE `Flock`;
DROP procedure IF EXISTS `Flock`.`deleteCamp`;

DELIMITER $$
USE `Flock`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deleteCamp`(
IN caiid INT, IN aiid INT)
BEGIN
	DELETE FROM Campaign
    WHERE CAID=caiid AND AID=aiid;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deleteContact
-- -----------------------------------------------------

USE `Flock`;
DROP procedure IF EXISTS `Flock`.`deleteContact`;

DELIMITER $$
USE `Flock`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deleteContact`(
IN ciid INT, IN aiid INT)
BEGIN
	DELETE FROM Contacts 
    WHERE CID=ciid AND AID=aiid;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deleteGroup
-- -----------------------------------------------------

USE `Flock`;
DROP procedure IF EXISTS `Flock`.`deleteGroup`;

DELIMITER $$
USE `Flock`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deleteGroup`(
IN giid INT, IN aiid INT)
BEGIN
	DELETE FROM `Flock`.Groups
    WHERE GID=giid AND AID=aiid;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deleteManyCamps
-- -----------------------------------------------------

USE `Flock`;
DROP procedure IF EXISTS `Flock`.`deleteManyCamps`;

DELIMITER $$
USE `Flock`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deleteManyCamps`(
IN caids VARCHAR(1000000), IN aiid INT)
BEGIN
	-- Αναγκαστικά θα γίνει με φουλ μπακάλικο τρόπο αυτό για να μην έχω 354654 κλήσεις στη βάση
    WHILE (LOCATE('|',caids)>0) 		-- caids is something like '65|98|23|12|1'
    DO
		SET @value = ELT(1, caids);
        SET caids = SUBSTRING(caids, LOCATE('|',caids)+1);
        
        DELETE FROM Campaign
		WHERE CAID= CAST(@value AS UNSIGNED INTEGER)
        AND AID=aiid;
	END WHILE;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deleteManyContacts
-- -----------------------------------------------------

USE `Flock`;
DROP procedure IF EXISTS `Flock`.`deleteManyContacts`;

DELIMITER $$
USE `Flock`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deleteManyContacts`(
IN cids VARCHAR(1000000), IN aiid INT)
BEGIN
	-- Αναγκαστικά θα γίνει με φουλ μπακάλικο τρόπο αυτό για να μην έχω 354654 κλήσεις στη βάση
    WHILE (LOCATE('|',cids)>0) 		-- cids is something like '65|98|23|12|1'
    DO
		SET @value = ELT(1, cids);
        SET cids = SUBSTRING(cids, LOCATE('|',cids)+1);
        
        DELETE FROM Contacts
		WHERE CID= CAST(@value AS UNSIGNED INTEGER)
        AND AID=aiid;
	END WHILE;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure editBP
-- -----------------------------------------------------

USE `Flock`;
DROP procedure IF EXISTS `Flock`.`editBP`;

DELIMITER $$
USE `Flock`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `editBP`(
IN aiid INT , IN password VARCHAR(45), IN fName VARCHAR(45), IN lName VARCHAR(45), IN phoone INT(14),
IN geender VARCHAR(45), IN countryy VARCHAR(45), IN ziip VARCHAR(45))
BEGIN

	UPDATE Accounts
    SET Passwd = password
    WHERE AID = aiid;

	UPDATE Business_Personal BP
    SET BP.F_Name = fName, BP.L_Name = lName, BP.Phone = phoone, BP.Gender = geender, BP.Country = countryy, BP.ZIP = ziip
    WHERE BP.AID = aiid;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure editCampaign
-- -----------------------------------------------------

USE `Flock`;
DROP procedure IF EXISTS `Flock`.`editCampaign`;

DELIMITER $$
USE `Flock`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `editCampaign`(
IN caiid INT, IN cname VARCHAR(45), IN aid INT , IN subject VARCHAR(100), IN text MEDIUMTEXT, IN endDate DATETIME, IN frequency VARCHAR(45))
BEGIN

	SET @fiid = NULL;
	SELECT F.FID INTO @fiid
	FROM Frequencies F
	WHERE F.F_Name=frequency;

	UPDATE Campaign C
    SET C.C_Name = cname, C.Subject = subject, C.Text = text, C.End_Date = endDate, C.FID = @fiid
    WHERE C.CAID=caiid AND C.AID=aid;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure editCompany
-- -----------------------------------------------------

USE `Flock`;
DROP procedure IF EXISTS `Flock`.`editCompany`;

DELIMITER $$
USE `Flock`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `editCompany`(
IN aiid INT , IN password VARCHAR(45), IN name VARCHAR(45),  IN phone INT(14),
IN country VARCHAR(45), IN zip VARCHAR(45), IN phyAddress VARCHAR(45))
BEGIN
	
    UPDATE Accounts
    SET Passwd = password
    WHERE AID = aiid;

	UPDATE Company C
    SET C.C_Name = name, C.Phone = phone, C.Country = country, C.ZIP = zip, C.Phy_Address = phyAddress
    WHERE C.AID = aiid;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure editContact
-- -----------------------------------------------------

USE `Flock`;
DROP procedure IF EXISTS `Flock`.`editContact`;

DELIMITER $$
USE `Flock`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `editContact`(
IN cid INT, IN aid INT, IN fullname VARCHAR(45), IN email VARCHAR(45))
BEGIN
	UPDATE Contacts C
    SET C.Full_Name = fullname, C.Email = email
    WHERE (C.CID=cid AND C.AID=aid);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getAccDetails
-- -----------------------------------------------------

USE `Flock`;
DROP procedure IF EXISTS `Flock`.`getAccDetails`;

DELIMITER $$
USE `Flock`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getAccDetails`(
IN AIID INT)
BEGIN
	
    SELECT A.type INTO @accType FROM Accounts A WHERE A.AID=AIID;
	
    IF @accType=0 THEN
		SELECT A.Email, A.Passwd, A.Type, A.Num_of_Camps, A.Num_of_Conts, 
				A.Num_of_Sent, BP.F_Name, BP.L_Name, BP.Phone, BP.Gender, BP.Country, BP.ZIP
		FROM Accounts A JOIN Business_Personal BP ON (A.AID=BP.AID)
		WHERE A.AID=AIID;
	ELSE
		SELECT A.Email, A.Passwd, A.Type, A.Num_of_Camps, A.Num_of_Conts, 
				A.Num_of_Sent,  C.C_Name, C.Country, C.Phone, C.Phy_Address, C.ZIP
		FROM Accounts A JOIN Company C ON (A.AID=C.AID)
		WHERE A.AID=AIID;
    END IF;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getCampFromCAID
-- -----------------------------------------------------

USE `Flock`;
DROP procedure IF EXISTS `Flock`.`getCampFromCAID`;

DELIMITER $$
USE `Flock`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getCampFromCAID`(
IN caiid INT)
BEGIN
	SELECT C.CAID, C.`Subject`, C.`Text` , C.Start_Date, C.End_Date, C.`C_Name` , F.F_Name, C.Num_of_Conts, C.Attachment, C.`AID`, C.GID 
    FROM Campaign C JOIN Frequencies F ON (C.FID=F.FID) 
    WHERE F.CAID=caiid;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getCamps
-- -----------------------------------------------------

USE `Flock`;
DROP procedure IF EXISTS `Flock`.`getCamps`;

DELIMITER $$
USE `Flock`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getCamps`(
IN AIID INT, IN keyword VARCHAR(45),IN ofst INT, IN num_of_rows INT, IN gid INT)
BEGIN
IF keyword IS NULL THEN
	IF gid IS NULL THEN
		SELECT C.CAID, C.`Subject`, C.`Text` , C.Start_Date, C.End_Date, C.`C_Name` , F.F_Name, C.Num_of_Conts, C.Attachment, C.`AID`, C.GID
		FROM Campaign C JOIN Frequencies F ON (C.FID=F.FID)
		WHERE (C.AID=AIID) 
		LIMIT OFST, NUM_OF_ROWS;
	ELSE
		SELECT C.CAID, C.`Subject`, C.`Text` , C.Start_Date, C.End_Date, C.`C_Name` , F.F_Name, C.Num_of_Conts, C.Attachment, C.`AID`, C.GID 
		FROM Campaign C JOIN Frequencies F ON (C.FID=F.FID)
		WHERE (C.AID=AIID) AND C.GID=gid
		LIMIT OFST, NUM_OF_ROWS;
	END IF;
ELSE
	IF gid IS NULL THEN
		SELECT C.CAID, C.`Subject`, C.`Text` , C.Start_Date, C.End_Date, C.`C_Name` , F.F_Name, C.Num_of_Conts, C.Attachment, C.`AID`, C.GID
		FROM Campaign C JOIN Frequencies F ON (C.FID=F.FID)
		WHERE (C.AID=AIID) 
        AND ( C.C_Name LIKE CONCAT('%',keyword,'%'))
		LIMIT OFST, NUM_OF_ROWS;
	ELSE
		SELECT C.CAID, C.`Subject`, C.`Text` , C.Start_Date, C.End_Date, C.`C_Name` , F.F_Name, C.Num_of_Conts, C.Attachment, C.`AID`, C.GID
		FROM Campaign C JOIN Frequencies F ON (C.FID=F.FID)
		WHERE (C.AID=AIID) AND C.GID=gid
        AND ( C.C_Name LIKE CONCAT('%',keyword,'%'))
		LIMIT OFST, NUM_OF_ROWS;
	END IF;
END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getContacts
-- -----------------------------------------------------

USE `Flock`;
DROP procedure IF EXISTS `Flock`.`getContacts`;

DELIMITER $$
USE `Flock`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getContacts`(
IN AIID INT, IN keyword VARCHAR(45), IN ofst INT, IN num_of_rows INT, IN gid INT)
BEGIN
IF keyword IS NULL THEN
	IF gid IS NULL THEN
		SELECT * 
		FROM Contacts C
		WHERE (C.AID=AIID) 
		LIMIT OFST, NUM_OF_ROWS;
	ELSE 
		SELECT * 
		FROM Contacts C JOIN Contacts_in_Groups CiG ON (C.CID=CiG.CID)
		WHERE (C.AID=AIID) AND CiG.GID=gid
		LIMIT OFST, NUM_OF_ROWS;
	END IF;
ELSE
	IF gid IS NULL THEN
		SELECT * 
		FROM Contacts C
		WHERE (C.AID=AIID) 
        AND ( C.Full_Name LIKE CONCAT('%',keyword,'%') 
			OR C.Email LIKE CONCAT('%',keyword,'%'))
		LIMIT OFST, NUM_OF_ROWS;
	ELSE 
		SELECT * 
		FROM Contacts C JOIN Contacts_in_Groups CiG ON (C.CID=CiG.CID)
		WHERE (C.AID=AIID) AND CiG.GID=gid
        AND ( C.Full_Name LIKE CONCAT('%',keyword,'%') 
			OR C.Email LIKE CONCAT('%',keyword,'%'))
		LIMIT OFST, NUM_OF_ROWS;
	END IF;
END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getContactsInGroup
-- -----------------------------------------------------

USE `Flock`;
DROP procedure IF EXISTS `Flock`.`getContactsInGroup`;

DELIMITER $$
USE `Flock`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getContactsInGroup`(
IN aid INT, IN gid INT)
BEGIN
	SELECT C.CID, C.Full_Name, C.Email, C.AID
    FROM Contacts C JOIN Contacts_in_Groups CiG ON (C.CID=CiG.CID)
    WHERE C.AID=aid AND CiG.GID=gid;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure numOfPagesInCamps
-- -----------------------------------------------------

USE `Flock`;
DROP procedure IF EXISTS `Flock`.`numOfPagesInCamps`;

DELIMITER $$
USE `Flock`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `numOfPagesInCamps`(
IN AIID INT, IN keyword VARCHAR(45), IN ofst INT, IN gid INT)
BEGIN
IF keyword IS NULL THEN
	IF gid IS NULL THEN
		SELECT COUNT(*)/ofst INTO @pageCount 
		FROM Campaign C
		WHERE (C.AID=AIID);
	ELSE
		SELECT COUNT(*)/ofst INTO @pageCount 
		FROM Campaign C
		WHERE (C.AID=AIID) AND C.GID=gid;
	END IF;
ELSE
	IF gid IS NULL THEN
		SELECT COUNT(*)/ofst INTO @pageCount 
		FROM Campaign C
		WHERE (C.AID=AIID)
		AND ( C.C_Name LIKE CONCAT('%',keyword,'%'));
	ELSE
		SELECT COUNT(*)/ofst INTO @pageCount 
		FROM Campaign C
		WHERE (C.AID=AIID) AND C.GID=gid
		AND ( C.C_Name LIKE CONCAT('%',keyword,'%'));
	END IF;
END IF;

SELECT CEIL(@pageCount);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure numOfPagesInConts
-- -----------------------------------------------------

USE `Flock`;
DROP procedure IF EXISTS `Flock`.`numOfPagesInConts`;

DELIMITER $$
USE `Flock`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `numOfPagesInConts`(
IN AIID INT, IN keyword VARCHAR(45), IN ofst INT, IN gid INT)
BEGIN
IF keyword IS NULL THEN
	IF gid IS NULL THEN
		SELECT COUNT(*)/ofst INTO  @pageCount
		FROM Contacts C
		WHERE (C.AID=AIID);
	ELSE
		SELECT COUNT(*)/ofst INTO  @pageCount
		FROM Contacts C JOIN Contacts_in_Groups CiG ON (C.CID=CiG.CID)
		WHERE (C.AID=AIID) AND CiG.GID=gid;
	END IF;
ELSE
	IF gid IS NULL THEN
		SELECT COUNT(*)/ofst INTO  @pageCount
		FROM Contacts C
		WHERE (C.AID=AIID)
        AND ( C.Full_Name LIKE CONCAT('%',keyword,'%') 
			OR C.Email LIKE CONCAT('%',keyword,'%'));
	ELSE
		SELECT COUNT(*)/ofst INTO  @pageCount
		FROM Contacts C JOIN Contacts_in_Groups CiG ON (C.CID=CiG.CID)
		WHERE (C.AID=AIID) AND CiG.GID=gid
        AND ( C.Full_Name LIKE CONCAT('%',keyword,'%') 
			OR C.Email LIKE CONCAT('%',keyword,'%'));
	END IF;
END IF;

SELECT CEIL(@pageCount);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure user_exists
-- -----------------------------------------------------

USE `Flock`;
DROP procedure IF EXISTS `Flock`.`user_exists`;

DELIMITER $$
USE `Flock`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `user_exists`(
IN username VARCHAR(45), IN passwrd VARCHAR(45))
BEGIN
	SET @userID= NULL;
	
    SELECT A.AID INTO @userID
    FROM Accounts A 
    WHERE A.Email=username
    AND A.Passwd=passwrd;
    
    IF @userID IS NULL THEN
		SELECT -1;
	ELSE
		SELECT @userID;
	END IF;
END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
USE `Flock`;

DELIMITER $$

USE `Flock`$$
DROP TRIGGER IF EXISTS `Flock`.`CampaignDeleted` $$
USE `Flock`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `Flock`.`CampaignDeleted`
AFTER DELETE ON `Flock`.`Campaign`
FOR EACH ROW
BEGIN
	UPDATE `Flock`.Accounts A 
    SET A.Num_of_Camps = A.Num_of_Camps-1 
    WHERE A.AID = OLD.AID ;
END$$


USE `Flock`$$
DROP TRIGGER IF EXISTS `Flock`.`CampaignInserted` $$
USE `Flock`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `Flock`.`CampaignInserted`
AFTER INSERT ON `Flock`.`Campaign`
FOR EACH ROW
BEGIN
	UPDATE `Flock`.Accounts A 
    SET A.Num_of_Camps = A.Num_of_Camps+1 
    WHERE A.AID = New.AID ;
END$$


USE `Flock`$$
DROP TRIGGER IF EXISTS `Flock`.`ContactDeleted` $$
USE `Flock`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `Flock`.`ContactDeleted`
AFTER DELETE ON `Flock`.`Contacts`
FOR EACH ROW
BEGIN
	UPDATE `Flock`.Accounts A 
    SET A.Num_of_Conts = A.Num_of_Conts-1 
    WHERE A.AID = OLD.AID ;
END$$


USE `Flock`$$
DROP TRIGGER IF EXISTS `Flock`.`newContactInserted` $$
USE `Flock`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `Flock`.`newContactInserted`
AFTER INSERT ON `Flock`.`Contacts`
FOR EACH ROW
BEGIN
	UPDATE `Flock`.Accounts A 
    SET A.Num_of_Conts = A.Num_of_Conts+1 
    WHERE A.AID = New.AID ;
END$$


DELIMITER ;
